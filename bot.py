from pycoingecko import CoinGeckoAPI
from flask import Flask
from flask_sslify import SSLify
from flask import request
from flask import jsonify
import re
import time
import random
from keys_and_addr import telegram_bot_token,API_key,url_weather,url_currency
import json
app=Flask(__name__)
sslify=SSLify(app)
import requests

URL=f'https://api.telegram.org/bot{telegram_bot_token}/'

"""–ó–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ ML"""
# domen='https://coronavirus-monitor.ru/coronavirus-v-rossii/'
# resp_for_pars=req.get(domen)
# resp_for_pars.encoding = 'utf8'
# pars=BeautifulSoup(resp_for_pars.text,'lxml')
# date=pars.find('time').get_text()
# conf_rus=pars.find('div', class_="info-block disease").find('i').get_text()
# conf_daily_rus=pars.find('div', class_="info-block disease").find('span').get_text()
# rec_rus=pars.find('div', class_="info-block healed").find('i').get_text()
# rec_daily_rus=pars.find('div', class_="info-block healed").find('span').get_text()
# died_rus=pars.find('div', class_="info-block deaths").find('i').get_text()
# died_daily_rus=pars.find('div', class_="info-block deaths").find('span').get_text()

# domen_tat='https://coronavirus-monitor.ru/coronavirus-v-tatarstane/'
# resp_for_pars_tat=req.get(domen_tat)
# resp_for_pars_tat.encoding = 'utf8'
# pars_tat=BeautifulSoup(resp_for_pars_tat.text,'lxml')
# date_tat=pars_tat.find('time').get_text()
# conf_tat=pars_tat.find('div', class_="info-block disease").find('i').get_text()
# conf_daily_tat=pars_tat.find('div', class_="info-block disease").find('span').get_text()
# rec_tat=pars_tat.find('div', class_="info-block healed").find('i').get_text()
# rec_daily_tat=pars_tat.find('div', class_="info-block healed").find('span').get_text()
# died_tat=pars_tat.find('div', class_="info-block deaths").find('i').get_text()
# # died_daily_tat=pars_tat.find('div', class_="info-block deaths").find('span').get_text()

# domen_all='https://www.worldometers.info/coronavirus/'
# resp_for_pars_all=req.get(domen_all)
# resp_for_pars_all.encoding = 'utf8'
# pars_all=BeautifulSoup(resp_for_pars_all.text,'lxml')
# # date_all=pars_all.find('div', class_='amount small').get_text()
# conf_all=pars_all.find('h1', text=re.compile('Coronavirus Cases:')).next_sibling.next_sibling.get_text()
# died_all=pars_all.find('h1', text=re.compile('Deaths:')).next_sibling.next_sibling.get_text()
# rec_all=pars_all.find('h1', text=re.compile('Recovered:')).next_sibling.next_sibling.get_text()
"""END –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ ML"""
def write_json(data, filename='answer.json'):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def get_updates():
    url=URL+'getUpdates'
    r=requests.get(url)
    return r.json()


def send_message(chat_id,text='meow meow meow'):

    url=URL+'sendMessage'
    answer={'chat_id':chat_id,
            'text':text}
    r=requests.post(url,json=answer)
    return r.json()

def send_dice(chat_id, emoji="üé≤"):

    url=URL+'sendDice'
    answer={'chat_id':chat_id,
            'emoji':emoji}
    r=requests.post(url,json=answer)
    return r.json()

def parse_url1(city):
    ma=str(url_weather.format(city=city,API_key=API_key))
    req=requests.get(ma)
    req_json=req.json()
    pressure=req_json['main']['pressure']
    temperature=req_json['main']['temp']
    humid = req_json['main']['humidity']
    name=req_json['name']
    wind=req_json['wind']['speed']
    weather=req_json['weather'][0]['description']
    visibility=req_json['visibility']
    return visibility , pressure,humid,name,temperature,wind,weather


def parse_text1(text):
    pattern=re.compile(r'\w+')
    city=pattern.findall(text)[1]
    return city

def replika(chat_id,text='–Ø - —à–µ—Ä—Å—Ç—å —ç—Ç–æ–π –∑–µ–º–ª–∏!'):

    repliks_list=['–Ø - –ú–Ø–í–ö —ç—Ç–æ–π –∑–µ–º–ª–∏!','–Ø - –ø—ã–ª–∞—é—â–∏–π —Ö–≤–æ—Å—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏—è!','–°–∫–ª–æ–Ω–∏—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –∫–ª—ã–∫–æ–º –∏ –∫–æ–≥—Ç–µ–º!','–ú–æ—è –º–∏—Å–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø–æ–ª–Ω–∞ –º–æ–ª–æ–∫–æ–º!','–ú–æ—è –º–∏—Å–∫–∞ –Ω–∞–∫–æ—Ä–º–∏—Ç –≥–æ–ª–æ–¥–Ω–æ–≥–æ!',
    '–û–¥–Ω–æ–≥–æ —Ñ–ª–∞–∫–æ–Ω–∞ –≤–∞–ª–µ—Ä—å—è–Ω—ã –º–Ω–µ –±—É–¥–µ—Ç –º–∞–ª–æ!','–ß—É—é, —Ç—ã –∑–∞—Ç–µ—è–ª –Ω–µ–ª–∞–¥–Ω–æ–µ!','–≠–Ω–µ—Ä–≥–∏—è –º—è–≤–∫–∞ –ø–∏—Ç–∞–µ—Ç —ç—Ç—É –∑–µ–º–ª—é!','–î–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –≤–µ–ª–∏–∫–æ–µ –ú—è!','–ù–µ —Å—Ç–æ–∏—Ç –¥–µ—Ä–≥–∞—Ç—å –º–µ–Ω—è –∑–∞ —Ö–≤–æ—Å—Ç!','–ó–∞–ø–∞—Ä–∏–ª —Ç—ã –º–µ–Ω—è, —Å–º–µ—Ä—Ç–Ω—ã–π!',
    '–ù–µ –æ—Å–∫–≤–µ—Ä–Ω—è–π —ç—Ç–æ –º–µ—Å—Ç–æ —Å–≤–æ–∏–º —Ç–µ–∫—Å—Ç–æ–º!','–ß–µ–º —Ç—ã —Ç—É—Ç, —á–µ—Ä—Ç –≤–æ–∑—å–º–∏, –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?','–ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–≤–∏—à—å –º–µ–Ω—è –≤ –ø–æ–∫–æ–µ, —è –ø—Ä–µ–≤—Ä–∞—â—É —Ç–µ–±—è –≤ –∫–æ–º–æ–∫ —à–µ—Ä—Å—Ç–∏','–•–º–º–º... –°—Ç—Ä–∞–Ω–Ω–æ.. —è –≤—Ä–æ–¥–µ –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª –Ω–∞ —Ç–µ–±—è —á–∞—Ä—ã —Å–ª–∞–±–æ—É–º–∏—è..',
    '–í–µ–ª–∏–∫–∏–π –ú—è —Å–æ–∑–¥–∞–ª —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ 80% –∏–∑ –∂–∏–¥–∫–æ—Å—Ç–∏... –ù–µ–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Ç–æ—Ä–º–æ–∑–Ω–æ–π ','–í –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≥–æ–≤–æ—Ä—é!... –Ø –ë–æ–≥, –∞ –Ω–µ –Ω–∞—Ä–∫–æ–±–∞—Ä–æ–Ω!','–í—ã—Ö–æ–¥ –µ—Å—Ç—å –≤—Å–µ–≥–¥–∞...–¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤–∞—Å —Å—ä–µ–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞—Ä–æ—á–∫–∞',
    '–ë–µ—Ä–µ–≥–∏—Ç–µ –ø—Ä–∏—Ä–æ–¥—É, –≤–∞—à—É –º–∞—Ç—å!','–ó–µ–º–ª—è —Å–æ–¥—Ä–æ–≥–Ω–µ—Ç—Å—è –æ—Ç –º–æ–∏—Ö –ª–∞–ø!','–î–∞ –ø–æ–≥–ª–æ—Ç–∏—Ç —Ç–µ–±—è –ú—è!','–Ø –Ω–µ–Ω–∞–≤–∏–∂—É —Ç–µ–±—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–æ—á–∫–æ–π —Å–≤–æ–µ–≥–æ —Ç–µ–ª–∞ -_-',]

    send_message(chat_id, text=repliks_list[random.randint( 0,len(repliks_list))])

def main():
    """–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ ML"""
    # r=get_updates()
    # chat_id=r['result'][-1]['message']['chat']['id']
    # send_message(chat_id)
    pass


def parse_text(text):
    pattern=r'/\w+'
    crypto=re.search(pattern,text).group()
    return crypto[1:]

def get_price(curr):
    try:
        cg = CoinGeckoAPI()
        r = cg.get_price(ids=curr, vs_currencies='usd')
        price = r[str(curr)]["usd"]
    except Exception:
        try:
            curr_upp=curr.upper()
            req = requests.get(url_currency)
            req_json = req.json()
            value=req_json['Valute'][str(curr_upp)]['Value']
            name_value=req_json['Valute'][str(curr_upp)]['Name']
            return ('–ö—É—Ä—Å ' + str(name_value)+' –≤ —Ä—É–±–ª—è—Ö ='+str(value))
        except Exception:
            cg = CoinGeckoAPI()
            r = cg.get_price(ids="bitcoin", vs_currencies='usd')
            price = str(r["bitcoin"]["usd"])
            return ('–ù–µ –∑–Ω–∞—é —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, –Ω–æ –≤–æ—Ç –¥–µ—Ä–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏—Ç–∫–æ–π–Ω–∞ ' + str(price))

    return ('–°—Ç–æ–∏–º–æ—Å—Ç—å  ' + str(curr) + '=' + str(price))

def send_sticker(chat_id,sticker):

    url=URL+'sendSticker'
    answer={'chat_id':chat_id,
            'sticker':sticker}
    r=requests.post(url,json=answer)
    return r.json()

def trier(r):
    global message
    global message1
    try:
        message=r['message']['text']
        message1=r['message']
        message=message.lower()
        return message
    except Exception:
        try:
            message=r['message']['dice']['emoji']
            return message
        except Exception:
            try:
                message=r['edited_message']['text']
                message=message.lower()
                return message
            except Exception:
                try:
                    message=r['edited_message']['dice']['emoji']
                    return message
                except Exception:
                    message=r['message']['sticker']['file_id']
                    message1=r['message']
                    return message , message1

spisok_igr=["‚öΩÔ∏è", "üèÄ", "üéØ",  "üé≤", "üé∞"]

@app.route('/',methods=['POST','GET'])
def index():
    if request.method=='POST':
        r=request.get_json()
        try:
            chat_id = r['message']['chat']['id']
        except Exception:
            chat_id = r['edited_message']['chat']['id']

        trier(r)
        pattern = r'/\w+'
        try:
            if re.search(pattern, message):
                price = get_price(parse_text(message))
                send_message(chat_id, text=price)
            # elif '–°–∫–æ–ª—å–∫–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –º–∏—Ä–µ?' in message:
            #     send_message(chat_id, text=conf_all)
            # elif '—Å–∫–æ–ª—å–∫–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –º–∏—Ä–µ?' in message:
            #     send_message(chat_id, text=conf_all)
            # elif '–°–∫–æ–ª—å–∫–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=conf_rus)
            # elif '—Å–∫–æ–ª—å–∫–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=conf_rus)
            # elif '–ø—Ä–∏—Ä–æ—Å—Ç –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=conf_daily_rus)
            # elif '–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=conf_daily_rus)
            # elif '–°–∫–æ–ª—å–∫–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=conf_tat)
            # elif '—Å–∫–æ–ª—å–∫–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=conf_tat)
            # elif '–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=conf_daily_tat)
            # elif '–ø—Ä–∏—Ä–æ—Å—Ç –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=conf_daily_tat)
            # elif '–°–∫–æ–ª—å–∫–æ —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –º–∏—Ä–µ?' in message:
            #     send_message(chat_id, text=died_all)
            # elif '—Å–∫–æ–ª—å–∫–æ —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –º–∏—Ä–µ?' in message:
            #     send_message(chat_id, text=died_all)
            # elif '–°–∫–æ–ª—å–∫–æ —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=died_rus)
            # elif '—Å–∫–æ–ª—å–∫–æ —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=died_rus)
            # elif '–ü—Ä–∏—Ä–æ—Å—Ç —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=died_daily_rus)
            # elif '–ø—Ä–∏—Ä–æ—Å—Ç —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=died_daily_rus)
            # elif '–°–∫–æ–ª—å–∫–æ —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=died_tat)
            # elif '—Å–∫–æ–ª—å–∫–æ —É–º–µ—Ä—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=died_tat)
            # elif '–°–∫–æ–ª—å–∫–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –º–∏—Ä–µ?' in message:
            #     send_message(chat_id, text=rec_all)
            # elif 'c–∫–æ–ª—å–∫–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –º–∏—Ä–µ?' in message:
            #     send_message(chat_id, text=rec_all)
            # elif '–°–∫–æ–ª—å–∫–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=rec_rus)
            # elif 'c–∫–æ–ª—å–∫–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏' in message:
            #     send_message(chat_id, text=rec_rus)
            # elif '–ü—Ä–∏—Ä–æ—Å—Ç –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏?' in message:
            #     send_message(chat_id, text=rec_daily_rus)
            # elif '–ø—Ä–∏—Ä–æ—Å—Ç –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –†–æ—Å—Å–∏–∏' in message:
            #     send_message(chat_id, text=rec_daily_rus)
            # elif '–°–∫–æ–ª—å–∫–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=rec_tat)
            # elif 'c–∫–æ–ª—å–∫–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=rec_tat)
            # elif '–ü—Ä–∏—Ä–æ—Å—Ç –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=rec_daily_tat)
            # elif '–ø—Ä–∏—Ä–æ—Å—Ç –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –æ—Ç –∫–æ–≤–∏–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ?' in message:
            #     send_message(chat_id, text=rec_daily_tat)
            elif '—Å–ª–æ—Ç –º–∞—à–∏–Ω–∞' in message:
                send_dice(chat_id, emoji='üé∞')
            elif message in spisok_igr:
                send_dice(chat_id, emoji=message)

            elif '–¥–∞—Ä—Ç—Å' in message:
                send_dice(chat_id, emoji='üéØ')

            elif '—Ñ—É—Ç–±–æ–ª' in message:
                send_dice(chat_id, emoji='‚öΩÔ∏è')

            elif '–±–∞—Å–∫–µ—Ç–±–æ–ª' in message:
                send_dice(chat_id, emoji='üèÄ')

            elif '–∫—É–±–∏–∫' in message:
                send_dice(chat_id, emoji='üé≤')


            elif '–º–Ω–µ –ø–ª–æ—Ö–æ' in message:
                send_message(chat_id, text='–ø–æ–ø—Ä–æ–±—É–π –º—É–∑—ã–∫—É –ø–æ—Å–ª—É—à–∞—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ, –ø–æ–≥—É–ª—è—Ç—å –∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –ª—é–±–∏–º—É—é –∏–≥—Ä—É')
            elif '–∫–∞–∫ –¥–µ–ª–∞?' in message:
                send_message(chat_id, text='—É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –∞ —É —Ç–µ–±—è?')

            elif 'sticker' in message1:
                send_sticker(chat_id, sticker= message)


            elif '–ø–æ–≥–æ–¥' in message:
                visibility , pressure,humid,name,temperature,wind,weather=parse_url1(parse_text1(message))
                send_message(chat_id, text='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ '+str(name)+' –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: '+str(temperature)
                +' \n–ø–æ–≥–æ–¥–∞: '+str(weather)+'.'+
                '\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: '+str(humid)+'%.'+
                '\n–î–∞–≤–ª–µ–Ω–∏–µ: '+str(pressure)+'hPa.'+
                '\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ : '+str(wind)+' –º/—Å.'+
                '\n–í–∏–¥–∏–º–æ—Å—Ç—å: '+str(visibility)+'–º–µ—Ç—Ä–æ–≤.')



            # –ú—è–≤–∫ - –≤–µ–ª–∏–∫–∏–π –∏ –º–æ–≥—É—á–∏–π
            elif '–º—è–≤–∫' in message:
                replika(chat_id)



            elif '—Ö–∞–π' in message:
                send_message(chat_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø–æ—Å–ª—É—à–Ω–∏–∫ –ú—è')
            elif 'hi' in message:
                send_message(chat_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø–æ—Å–ª—É—à–Ω–∏–∫ –ú—è')
            elif 'hello' in message:
                send_message(chat_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø–æ—Å–ª—É—à–Ω–∏–∫ –ú—è')
            elif '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π' in message:
                send_message(chat_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø–æ—Å–ª—É—à–Ω–∏–∫ –ú—è')
            elif '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é' in message:
                send_message(chat_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø–æ—Å–ª—É—à–Ω–∏–∫ –ú—è')
            elif '–ø—Ä–∏–≤–µ—Ç' in message:
                send_message(chat_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø–æ—Å–ª—É—à–Ω–∏–∫ –ú—è')
            elif '–ø–æ—à–µ–ª –Ω–∞' in message:
                send_message(chat_id, text='–°–∞–º/—Å–∞–º–∞ –∏–¥–∏')
            elif '–∏–¥–∏ –Ω–∞' in message:
                send_message(chat_id, text='–°–∞–º/—Å–∞–º–∞ –∏–¥–∏')
            elif '—É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞' in message:
                send_message(chat_id, text='–ü–æ–ø—Ä–æ–±—É–π –ø–æ–¥—É–º–∞—Ç—å –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ç–æ–º—É –∫—Ç–æ –∑–Ω–∞–µ—Ç –∏ —Å–ø—Ä–æ—Å–∏ —É –Ω–µ–≥–æ —Å–æ–≤–µ—Ç. –ú–Ω–æ–≥–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ')
            elif '–∫—Ç–æ —Ç—ã' in message:
                send_message(chat_id, text='–Ø  - –±–æ–≥ –ú—è–≤–∫! –ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å –ø—É—à–∏—Å—Ç—ã—Ö, –∫–∞—Ä–∞—é—â–∞—è –ª–∞–ø–∞ –≤–∏–Ω–æ–≤–Ω—ã—Ö, \n —É–Ω–∏—á—Ç–æ–∂–∏—Ç–µ–ª—å –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ —Ç–µ–ø–ª–∞—è —à–µ—Ä—Å—Ç—å –¥–ª—è –∑–∞–º–µ—Ä–∑—à–∏—Ö! \n –°–∫–ª–æ–Ω–∏—Å—å –ø—Ä–µ–¥–æ –º–Ω–æ–π –∏ —è –∏—Å–ø–æ–ª–Ω—é —Ç–≤–æ—é –º—è–≤–æ—á–Ω—É—é –≤–æ–ª—é!')
            elif '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç' in message:
                send_message(chat_id, text='–Ø  - –±–æ–≥ –ú—è–≤–∫! –ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å –ø—É—à–∏—Å—Ç—ã—Ö, –∫–∞—Ä–∞—é—â–∞—è –ª–∞–ø–∞ –≤–∏–Ω–æ–≤–Ω—ã—Ö, \n —É–Ω–∏—á—Ç–æ–∂–∏—Ç–µ–ª—å –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ —Ç–µ–ø–ª–∞—è —à–µ—Ä—Å—Ç—å –¥–ª—è –∑–∞–º–µ—Ä–∑—à–∏—Ö! \n –°–∫–ª–æ–Ω–∏—Å—å –ø—Ä–µ–¥–æ –º–Ω–æ–π –∏ —è –∏—Å–ø–æ–ª–Ω—é —Ç–≤–æ—é –º—è–≤–æ—á–Ω—É—é –≤–æ–ª—é!')
                time.sleep(2)
                send_message(chat_id, text='–∞ –∫–∞–∫ —Ç–µ–±—è?')
                time.sleep(9)
                if request.method!='POST':
                    r=request.get_json()
                    try:
                        chat_id = r['message']['chat']['id']
                    except Exception:
                        chat_id = r['edited_message']['chat']['id']

                    trier(r)
                    if '–º–µ–Ω—è –∑–æ–≤—É—Ç –¢–æ–Ω–∏' in message:
                        send_message(chat_id, text='Fuck you, Tony')
                    else:
                        time.sleep(5)
                        send_message(chat_id, text='–ú–æ–∂–Ω–æ –∑–≤–∞—Ç—å —Ç–µ–±—è –î–∂–∏–º–º–∏?')
                        time.sleep(3)
                        send_message(chat_id, text='–û–∫–µ–π, –î–∂–∏–º')

            else:
                replika(chat_id)
        except:
            replika(chat_id)

        return jsonify(r)
    return '<h1>Hello bot</h1>'


if __name__ == '__main__':\
    app.run()